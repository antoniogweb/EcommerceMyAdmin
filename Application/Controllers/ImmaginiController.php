<?phpif (!defined('EG')) die('Direct access not allowed!');// EcommerceMyAdmin is a PHP CMS based on MvcMyLibrary//// Copyright (C) 2009 - 2023  Antonio Gallo (info@laboratoriolibero.com)// See COPYRIGHT.txt and LICENSE.txt.//// This file is part of EcommerceMyAdmin//// EcommerceMyAdmin is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// (at your option) any later version.//// EcommerceMyAdmin is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License// along with EcommerceMyAdmin.  If not, see <http://www.gnu.org/licenses/>.class ImmaginiController extends BaseController {		public $orderBy;		public function __construct($model, $controller, $queryString = array(), $application = null, $action = null)	{		parent::__construct($model, $controller, $queryString, $application, $action);				$this->session('admin');		$this->s['admin']->check();				$this->model('PagesModel');		$this->model('ImmaginiModel');		$this->orderBy = "immagini.id_order";				$data['token'] = $this->s['admin']->status['token'];		$this->append($data);	}		public function form($queryType = 'insert', $id = 0)	{		$this->m[$this->modelName]->setValuesFromPost('alt_tag');				parent::form($queryType, $id);	}		public function view($id_page = null, $id_c = null)	{		$this->clean();				if (isset($id_page))		{			$clean['id_page'] = (int)$id_page;			$clean['id_c'] = (int)$id_c;						$data['records'] = $this->m['ImmaginiModel']->clear()->where(array(				'id_page'=>$clean['id_page'],			))->orderBy('id_order');						$this->m['ImmaginiModel']->aWhere(array(				"id_c"	=>	$clean['id_c'],			));						$data['records'] = $this->m['ImmaginiModel']->send();						$this->append($data);			$this->load('view');		}	}	public function ordina()	{		$this->s['admin']->check();				$this->clean();				if (strstr($this->orderBy, "id_order"))		{			if (isset($_POST["ordinaImmagini"]))			{				$clean["order"] = $this->request->post("order","","sanitizeAll");								$orderArray = explode(",",$clean["order"]);								$orderClean = array();								foreach ($orderArray as $id_immagine)				{					if ((int)$id_immagine !== 0)					{						$orderClean[] = (int)$id_immagine;					}				}								$where = "in(".implode(",",$orderClean).")";								$idOrderArray = $this->m[$this->modelName]->where(array(					"in" => array("id_immagine" => $orderClean),				))->toList("id_order")->send();								if ($this->orderBy === "immagini.id_order")				{					sort($idOrderArray);				}				else				{					rsort($idOrderArray);				}// 				echo $where;								for ($i=0; $i<count($orderClean); $i++)				{					if (isset($idOrderArray[$i]))					{						$this->m[$this->modelName]->values = array(							"id_order" => (int)$idOrderArray[$i],						);												$this->m[$this->modelName]->update((int)$orderClean[$i]);					}				}			}		}	}		public function moveup($id_immagine = null)	{		if (isset($id_immagine))		{			$clean['id_immagine'] = (int)$id_immagine;						$clean['id_page'] = (int)$this->m['ImmaginiModel']->getIdContenuto($clean['id_immagine']);			if ($clean['id_page'] !== 0)			{				$this->m['ImmaginiModel']->where(array('id_page'=>$clean['id_page']))->orderBy('id_order');				$this->m['ImmaginiModel']->moveup($clean['id_immagine']);			}		}	}	public function movedown($id_immagine = null)	{		if (isset($id_immagine))		{			$clean['id_immagine'] = (int)$id_immagine;			$clean['id_page'] = (int)$this->m['ImmaginiModel']->getIdContenuto($clean['id_immagine']);			if ($clean['id_page'] !== 0)			{				$this->m['ImmaginiModel']->where(array('id_page'=>$clean['id_page']))->orderBy('id_order');				$this->m['ImmaginiModel']->movedown($clean['id_immagine']);			}		}	}	public function erase($id_immagine = null)	{		$this->clean();		if (isset($id_immagine))		{			$clean['id_immagine'] = (int)$id_immagine;			$this->m['ImmaginiModel']->del($clean['id_immagine']);		}	}		public function rotateo($id_immagine = null)	{		$this->clean();				if (isset($id_immagine))		{			$clean['id_immagine'] = (int)$id_immagine;			$immagine = $this->m['ImmaginiModel']->selectId($clean['id_immagine']);						if (!empty($immagine))			{				$path = Domain::$parentRoot."/".Parametri::$cartellaImmaginiContenuti;								if (file_exists($path."/".$immagine["immagine"]))				{					$thumb = new Image_Gd_Thumbnail($path);										$thumb->imageRotations[] = array(						"angle"	=>	270,					);										$thumb->render($immagine["immagine"], $path."/".$immagine["immagine"]);				}			}		}	}	}